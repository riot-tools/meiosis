<samplecomponent>

    <h1 if={ !state.loading }>Sample Component</h1>
    <h1 if={ state.loading }>Loading...</h1>

    Outside was clicked { state.buttonclicked } times.

    <br />
    <br />

    <button onclick={ () => setLoading(!state.loading) }>Click me to toggle independent component loading state</button>

    <br />
    <hr />

    <h3>Items in state:</h3>
    <li each={ (item, i) in state.items }>
        <input type="checkbox" checked={ item.checked } onchange={ setChecked(i, item) } }>
        { item.text }
    </li>

    <pre>
        {
            [
                '########## Component State ##########',
                '',
                JSON.stringify(state, null, 4),
                '',
                '#####################################',

            ].join('\n')
        }
    </pre>

    <script>

        import { connect, dispatch } from './state';
        import { clone } from '@riot-tools/state-utils';


        const mapToState = (appState, ownState) => ({
            ...ownState,
            ...appState,
        });

        const component = {
            state: { loading: false },
            setLoading (loading) { this.update({ loading }) },
            setChecked(i, item) {

                const self = this;

                return (e) => {

                    e.preventDefault();

                    const items = clone(self.state.items);

                    items[i].checked = e.target.checked === true;

                    dispatch({ items });
                }
            }
        }

        export default connect(mapToState)(component);
    </script>
</samplecomponent>